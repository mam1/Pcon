/***********************************************************************/
/*                                                                     */
/*  dio.cogc -  version 0.1                                            */
/*                                                                     */                                           
/*  This code updates the Parallax Digital IO Board via the serial     */
/*  interface. It builds a control byte in which each bit represents   */
/*  the state of the corresponding relay on the DIO Board. Then the    */
/*  byte (channel control byte - ccb) is loaded into the serial         */
/*  interface.                                                         */
/*                                                                     */
/*  It is in a loop waiting for a trigger from the rtc cog.  When      */
/*  triggered  It looks at the channel control array(cca) to see how   */
/*  the state of the channel is controlled:                            */
/*                                                                     */                                       
/*           0 = manual, 1 = time, 2 = time & sensor                   */
/*                                                                     */ 
/*  If manual control is specified; the state in the channel control   */
/*  array (cca) is used to set the ccb bit.                            */
/*                                                                     */
/*  If time control is specified; the channel state is determined by   */
/*  searching the channel schedule with the current time/day.          */
/*                                                                     */                                                                       
/***********************************************************************/

#include <propeller.h>
#include "Pcon.h"
#include "dio.h"
#include "bitlit.h" 

/***************************** globals ******************************/
// static _COGMEM uint32_t         state_mask,key_mask;
static _COGMEM uint32_t    state_mask = B32(10000000,00000000,00000000,00000000);
static _COGMEM uint32_t    key_mask   = B32(01111111,11111111,11111111,11111111);
static _COGMEM int              hold_min;
/************************ support routines **************************/
_NATIVE
int get_key(uint32_t b)
{
    uint32_t     k;
    k = (int)(b & key_mask);
    return (int)k;
}
_NATIVE
int get_statev(uint32_t b)
{
    if (b & state_mask)
        return 1;
    return 0;
}
#if _DRIVEN == _DIOB
/* send a control byte to the dio board */
_NATIVE
void send_ccb(byte)
{
    int         i;
    dir_out(_DataIO);   //setup to write 
    pin_low(_DataIO);  
    for(i=7;i>=0;i--)   //serialize and reverse bits 
    {
        if((1 << i) & byte)
            pin_high(_DataIO);  //send bit high
        else
            pin_low(_DataIO);   //send bit low
        /* send clock pluse */                 
        pin_high(_Clock);   
        pin_low(_Clock);
    }   
    pin_high(_HC595);       //set the LAT_RlY to high this will cause the HC595 to read the value from the shift register */     
    pin_low(_HC595);        //done - ready for next write */ 
    return;
}
#else
/* send a control byte to the AQY212GH relays */
_NATIVE
void send_ccb(byte)
{
    int         i;
 
    for(i=0;i>=_NUMBER_OF_CHANNELS;i++)  
    {
        if((1 << i) & byte)
            pin_high(_RLY1 + i);  //send bit high
        else
            pin_low(_RLY1 + i);   //send bit low

    }   

    return;
}
#endif
_NATIVE
int test_sch(uint32_t cnt, volatile uint32_t *r, int k, volatile DIO_CB *m)
{
    static int                     i;
    volatile uint32_t              *first_record;

    if(cnt == 0)
            return 0;
    if(cnt == 1)
            return 1;

    first_record = r;
    i=0;
    while(i++ < cnt)
    {
        if(get_key(*r)==k)
            return get_statev(*r);
        if((get_key(*r) > k))     
            return get_statev(*(--r));
        r++;
    }
    return get_statev(*first_record);
}     
/******************************************************************/
/********************** start main routine ************************/
/******************************************************************/
_NAKED
void main (volatile DIO_CB *m)
{ 
    static  int i,key;
    static  uint8_t    ccb,hccb;

#if _DRIVEN == _DIOB
    /* Setup IO Pins for Parallax Digital IO Board */
    dir_out(_Clock);
    dir_out(_HC165);
    dir_out(_HC595);
    pin_low(_Clock);
    pin_low(_HC165);
    pin_low(_HC595);
#else
    /* setup pins for driving AQY212GH relays */
    dir_out(_RLY1);
    dir_out(_RLY2);
    dir_out(_RLY3);
    dir_out(_RLY4);
    dir_out(_RLY5);
#endif

    send_ccb(0);    //turn off all relays  

/*  loop forever */
    for(;;)  
    {
        if((hold_min != (m->td_ptr)->min)||(*(m->update_ptr)))
        {
            // if(m->sch[0][0]==0)
            // {
                // m->abort = 44;
            // }
            hold_min = (m->td_ptr)->min;
            *(m->update_ptr) = 0;
        /* build a channel control byte */
            while(lockset(m->cca_lock));
            ccb = 0;
            for(i=0;i<_NUMBER_OF_CHANNELS;i++)
                switch(m->cca[i].c_mode)
                {   
                    case 0:     //manual control
                        if(m->cca[i].state == 1)
                            ccb |=(uint8_t)(1<<i);
                        else
                            ccb &= ~(uint8_t)(1<<i); 
                        break;
                    case 1:     //time control
                        while(lockset(m->tdb_lock));    //wait for a lock
                        key = ((m->td_ptr)->hour * 60) + (m->td_ptr)->min;
                        if(test_sch(m->sch[i][0], &(m->sch[i][1]), key, m))
                        {
                            ccb |= (1<<i);
                            m->cca[i].state = 1;
                        }
                        else
                        {
                            ccb &= ~(1<<i);
                            m->cca[i].state = 0;
                        }
                        lockclr(m->tdb_lock);
                        break;
                    case 2:     //time and sensor control, not implemented
                        send_ccb(0);    //try to turn off all relays on the dio board 
                        m->abort = 2;   //abort application
                        break;
                    default:    //should not happen
                        send_ccb(0);    //try to turn off all relays on the dio board 
                        m->abort = 1;   //abort application
                }
            lockclr(m->cca_lock);

        /* test for a change in channel control byte */
            if(hccb == ccb);
            else 
            {
                hccb = ccb;
                send_ccb(ccb);
            }
        }
    }       
}
/******************************************************************/
/************************ end main routine ************************/
/******************************************************************/

